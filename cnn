import keras
from keras.models import Sequential, Input, Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.layers import BatchNormalization
from sklearn.utils import class_weight
import numpy as np
import pandas as pd
from sklearn import metrics

num_classes = 25

def malware_model():
    Malware_model = Sequential()
    Malware_model.add(Conv2D(30, kernel_size=(3, 3),
                     activation='relu',
                     input_shape=(64,64,3)))

    Malware_model.add(MaxPooling2D(pool_size=(2, 2)))
    Malware_model.add(Conv2D(15, (3, 3), activation='relu'))
    Malware_model.add(MaxPooling2D(pool_size=(2, 2)))
    Malware_model.add(Dropout(0.25))
    Malware_model.add(Flatten())
    Malware_model.add(Dense(128, activation='relu'))
    Malware_model.add(Dropout(0.5))
    Malware_model.add(Dense(50, activation='relu'))
    Malware_model.add(Dense(num_classes, activation='softmax'))
    Malware_model.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=['accuracy'])
    return Malware_model
    
Malware_model = malware_model()
Malware_model.summary()
y_train.shape
y_train_new = np.argmax(y_train, axis=1)
y_train_new

#Deal with unbalanced Data
class_weights = dict(zip(np.unique(y_train_new),class_weight.compute_class_weight(class_weight="balanced",
                                                 classes=np.unique(y_train_new),
                                                 y=y_train_new)))
                                                 
Malware_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=15, class_weight=class_weights)

score = Malware_model.evaluate(X_train, y_train)
print('Final CNN training accuracy: ', score[1])

scores = Malware_model.evaluate(X_test, y_test)
print('Final CNN test accuracy: ', scores[1])

y_pred = Malware_model.predict(X_test, verbose=0)
#predict_x=model.predict(X_test) 
#classes_x=np.argmax(y_pred,axis=1)

y_pred #still one-hot encoded
y_pred2 = np.argmax(y_pred, axis=1) #convert them to single-digit ones
y_pred2
y_test #still one-hot encoded
y_test2 = np.argmax(y_test, axis=1) #convert them to single-digit ones
y_test2

print("Classification report for - \n{}:\n{}\n".format(
    Malware_model, metrics.classification_report(y_test2, y_pred2)))

c_matrix = metrics.confusion_matrix(y_test2, y_pred2)

import seaborn as sns
def confusion_matrix(confusion_matrix, class_names, figsize = (10,7), fontsize=14):
    """Prints a confusion matrix, as returned by sklearn.metrics.confusion_matrix, as a heatmap.
    
    Arguments
    ---------
    confusion_matrix: numpy.ndarray
        The numpy.ndarray object returned from a call to sklearn.metrics.confusion_matrix. 
        Similarly constructed ndarrays can also be used.
    class_names: list
        An ordered list of class names, in the order they index the given confusion matrix.
    figsize: tuple
        A 2-long tuple, the first value determining the horizontal size of the ouputted figure,
        the second determining the vertical size. Defaults to (10,7).
    fontsize: int
        Font size for axes labels. Defaults to 14.
    """
    df_cm = pd.DataFrame(
        confusion_matrix, index=class_names, columns=class_names, 
    )
    fig = plt.figure(figsize=figsize)
    try:
        heatmap = sns.heatmap(df_cm, annot=True, fmt="d")
    except ValueError:
        raise ValueError("Confusion matrix values must be integers.")
    heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=fontsize)
    heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize=fontsize)
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    
class_names= batches.class_indices.keys()
confusion_matrix(c_matrix, class_names, figsize = (20,7), fontsize=14)

tn, fp, fn, tp = confusion_matrix(list(y_test2), list(y_pred2), labels=[0, 1]).ravel()

print('True Positive', tp)
print('True Negative', tn)
print('False Positive', fp)
print('False Negative', fn)

from sklearn.metrics import accuracy_score

accuracy_score(y_test2, y_pred2)

ACC = (tp+tn)/(tp+fp+fn+tn)
print('accuracy', ACC)
